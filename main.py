from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Command, ContentTypeFilter
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton, CallbackQuery, ContentType, Message
from pyowm import OWM
from pyowm.utils.config import get_default_config
from pyowm.commons.exceptions import NotFoundError
from math import *
from decimal import Decimal

from graph_to_send import save_picture
from sudoku import solve_sudoku
from config import Config
from translate import Translator
from translate.exceptions import InvalidProviderError

print('OK')


class Common(StatesGroup):
    weath = State()
    calc = State()
    sudoku = State()
    connect_to_admin = State()


class TranslatorState(StatesGroup):
    text = State()
    lang = State()


class GraphikState(StatesGroup):
    function = State()
    get_range = State()


class Weather:
    def __init__(self, place):
        self.observation = mgr.weather_at_place(place)
        self.w = self.observation.weather

    def get_status(self):
        return self.w.detailed_status

    def get_temp(self):
        return self.w.temperature('celsius')['temp']

    def get_speed(self):
        return self.w.wind()['speed']


bot = Bot(token=Config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

mgr = OWM(Config.OWM_TOKEN).weather_manager()
config_dict = get_default_config()
config_dict['language'] = Config.LANGUAGE
print("OK")


@dp.message_handler(Command("start"), state='*')
async def process_start_command(message: Message, state: FSMContext):
    greet = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("/help"))
    await message.reply(Config.MESSAGES['start'], reply_markup=greet)
    await state.finish()


@dp.message_handler(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–ºüÜò", state='*')
async def dev_call(message: Message):
    await message.reply("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–æ–æ–±—â–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É:", reply=False)
    await Common.connect_to_admin.set()


@dp.message_handler(Command("help"), state='*')
async def process_help_command(message: Message, state: FSMContext):
    greet = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    [greet.insert(i) for i in Config.OPTIONS]
    if message.from_user.id != Config.ADMIN_ID:
        greet.add(KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–ºüÜò"))
    await message.reply(Config.MESSAGES['help'], reply_markup=greet)
    await state.finish()


@dp.message_handler(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—ÉüåÖ", state='*')
async def w(message: Message):
    await message.reply(Config.MESSAGES['weather'], reply=False)
    await Common.weath.set()


@dp.message_handler(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Äüî¢", state='*')
async def c(message: Message):
    z = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="operators"))
    await message.reply(Config.MESSAGES['calc'], reply=False, reply_markup=z)
    await Common.calc.set()


@dp.message_handler(text="–†–µ—à–∏—Ç—å —Å—É–¥–æ–∫—Éüìù", state='*')
async def s(message: Message):
    await message.reply(Config.MESSAGES[message.text], reply=False)
    await Common.sudoku.set()


@dp.message_handler(text='–ì—Ä–∞—Ñ–∏–∫üìà', state='*')
async def graph_state(message: Message, state: FSMContext):
    await message.reply(Config.MESSAGES[message.text], reply=False)
    await GraphikState.get_range.set()


@dp.message_handler(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç„äô", state='*')
async def translate_state(message: Message, state: FSMContext):
    await message.reply(Config.MESSAGES[message.text], reply=False)
    await TranslatorState.lang.set()


@dp.callback_query_handler(text='change_dia', state=GraphikState.function)
async def change_dia(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
    await GraphikState.get_range.set()


@dp.callback_query_handler(text="operators", state='*')
async def info_operators(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(text='x**y - –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ x –≤ —Å—Ç–µ–ø–µ–Ω—å y.\n\n'
                                       'x // y - –î–µ–ª–µ–Ω–∏–µ –Ω–∞—Ü–µ–ª–æ x –Ω–∞ y.\n\n'
                                       'ceil(x) - –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ x –≤–≤–µ—Ä—Ö.\n\n'
                                       'abs(x) - –ú–æ–¥—É–ª—å x.\n\n'
                                       'factorial(x) - –§–∞–∫—Ç–æ—Ä–∏–∞–ª x.\n\n'
                                       'floor(x) - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ x –≤–Ω–∏–∑.\n\n'
                                       'x % y - –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è x –Ω–∞ y.\n\n'
                                       'trunc(x) - –æ—Ç—Å–µ–∫–∞–µ—Ç –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å x.\n\n'
                                       'exp(x) - –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≠–π–ª–µ—Ä–∞ –≤ —Å—Ç–µ–ø–µ–Ω–∏ x.\n\n'
                                       'log(x, base) - –õ–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç x –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é base, –µ—Å–ª–∏ base –Ω–µ —É–∫–∞–∑–∞–Ω, '
                                       '—Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º.\n\n '
                                       'log10(x) - –õ–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç —Ö –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 10.\n\n'
                                       'log2(x) - –õ–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç x –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 2.\n\n'
                                       'sqrt(x, base) - –∫–æ—Ä–µ–Ω—å –∏–∑ x –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é base, –µ–ª–∏ base –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ—Ç—Å—è '
                                       '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å.\n\n '
                                       'acos(x) - –∞—Ä–∫–æ—Å–∏–Ω—É—Å x –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö.\n\n'
                                       'asin(x) - –∞—Ä–∫—Å–∏–Ω—É—Å x –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö.\n\n'
                                       'atan(x) - –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å —Ö –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö.\n\n'
                                       'cos(x) - –∫–æ—Å–∏–Ω—É—Å —Ö.\n\n'
                                       'sin(x) - —Å–∏–Ω—É—Å —Ö.\n\n'
                                       'gcd() - –ù–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª\n\n'
                                       'lcm() - –ù–∞–∏–º–µ–Ω—å—à–µ–µ –æ–±—â–µ–µ –∫—Ä–∞—Ç–Ω–æ–µ –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª\n\n'
                                       'tan(x) - —Ç–∞–Ω–≥–µ–Ω—Å —Ö.\n\n'
                                       'hypot(x, y) - –≤—ã—á–∏—Å–ª—è–µ—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É—Å —Å –∫–∞—Ç–µ—Ç–∞–º–∏ x –∏ y.\n\n'
                                       'degrees(x) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã.\n\n'
                                       'radians(x) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã.\n\n'
                                       'cosh(X) - –≤—ã—á–∏—Å–ª—è–µ—Ç –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π –∫–æ—Å–∏–Ω—É—Å.\n\n'
                                       'sinh(X) - –≤—ã—á–∏—Å–ª—è–µ—Ç –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Å–∏–Ω—É—Å.\n\n'
                                       'tanh(X) - –≤—ã—á–∏—Å–ª—è–µ—Ç –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ç–∞–Ω–≥–µ–Ω—Å.\n\n'
                                       'int(x, base) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ —Ö –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è base –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é.\n\n'
                                       'bin(x) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ö –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è.\n\n'
                                       'oct(x) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç x –≤ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è.\n\n'
                                       'hex(x) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ö –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–µ—Ç–∏—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è.\n\n'
                                       'acosh(X) - –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π –∫–æ—Å–∏–Ω—É—Å.\n\n'
                                       'asinh(X) - –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Å–∏–Ω—É—Å.\n\n'
                                       'perm(x, y) - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ x —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ y\n\n'
                                       'comb(x, y) - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ x —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ y\n\n'
                                       'atanh(x) - –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ç–∞–Ω–≥–µ–Ω—Å.\n\n'
                                       '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n\n'
                                       '–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã:\n\n'
                                       'pi - —á–∏—Å–ª–æ œÄ.\n\n'
                                       'e - –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≠–π–ª–µ—Ä–∞.'
                                  )


@dp.message_handler(state=TranslatorState.lang)
async def commit_text(message: Message, state: FSMContext):
    try:
        translator = Translator(*message.text.split('-')[::-1])
    except InvalidProviderError:
        await message.reply(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ –¥–∞–Ω–Ω—É—é –ø–∞—Ä—É, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏–∑ —è–∑—ã–∫–æ–≤", reply=False)
    else:
        await state.update_data(
            {"translator": translator}
        )
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
        await TranslatorState.text.set()


@dp.callback_query_handler(text="switch_lang", state=TranslatorState.text)
async def switch_lang(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.send_message(call.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É")
    await TranslatorState.lang.set()


@dp.message_handler(state=TranslatorState.text)
async def set_language(message: Message, state: FSMContext):
    data = await state.get_data()
    translator = data.get("translator")
    button = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫", callback_data="switch_lang"))
    try:
        await message.reply("–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n" + translator.translate(message.text), reply=False,
                            reply_markup=button)
    except:
        await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply=False,
                            reply_markup=button)


@dp.message_handler(state=GraphikState.get_range)
async def get_function(message: Message, state: FSMContext):
    try:
        start, stop, n = map(int, message.text.split('/'))
    except:
        await message.reply("–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    else:
        await state.update_data(
            {'values': [start, stop, n]}
        )
        z = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="operators"))
        await message.reply("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ f(x), –Ω–∞–ø—Ä–∏–º–µ—Ä, (x - 2)**2", reply_markup=z)
        await GraphikState.function.set()


@dp.message_handler(state=GraphikState.function)
async def art(message: types.Message, state: FSMContext):
    try:
        func = lambda x: eval(message.text)
    except:
        await message.reply("–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å")
    else:
        data = await state.get_data()
        try:
            save_picture(*data.get("values"), func, f"–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = {message.text}")
        except:
            await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–µ—Ä—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        else:
            z = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="change_dia"))
            with open("to_send.png", 'rb') as im:
                await bot.send_photo(message.from_user.id, photo=im, reply_markup=z)


@dp.message_handler(state=Common.connect_to_admin)
async def back_call(message: Message, state: FSMContext):
    await bot.send_message(Config.ADMIN_ID, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + message.text)
    await state.finish()
    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æüì™", reply=False)


@dp.message_handler(state=Common.calc)
async def calculating(message: Message):
    try:
        ans = Decimal(eval(message.text))
    except NameError:
        await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É‚ö†", reply=False)
    except ZeroDivisionError:
        await message.reply("–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å‚ö†", reply=False)
    except TypeError:
        await message.reply("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ‚õî", reply=False)
    except SyntaxError:
        await message.reply("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ‚õî", reply=False)
    else:
        await message.reply(f"üÜó–û—Ç–≤–µ—Ç:\n{ans}")


@dp.message_handler(state=Common.weath)
async def get_weather(message: Message):
    await message.reply('–°–µ–∫—É–Ω–¥—É...üîç', reply=False)
    city = message.text.title()
    try:
        ans = Weather(city)
    except NotFoundError:
        await message.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥üõë")
    else:
        await message.reply(f"–°–µ–π—á–∞—Å –≤ {city} {ans.get_status()}.\n"
                            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {ans.get_temp()} –≥—Ä–∞–¥—É—Å–æ–≤.\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç {ans.get_speed()} –º/—Å.")


@dp.message_handler(state=Common.sudoku)
async def sudoku(message: Message):
    k = message.text.split('\n')
    if len(k) == 9 and len(k[0]) == 9:
        await message.reply(
            '–û—Ç–≤–µ—Ç:' + '\n' + '\n'.join([' '.join(map(str, i)) for i in solve_sudoku(message.text.strip())]))
    else:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–¥–æ–∫—É‚ö†'
                            '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ 9 –Ω–∞ 9, –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω—É–ª—è–º–∏.')


@dp.message_handler(ContentTypeFilter(content_types=[ContentType.ANY]), state='*')
async def info(message: Message):
    await message.reply("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –Ω–µ –∑–Ω–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")


if __name__ == '__main__':
    executor.start_polling(dp)
